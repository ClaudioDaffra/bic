proc EOL {} {return "\[\n\r\]+"}
proc BOL {} {return "\[ \t\]*"}
proc ADR {} {return "0x\[0-9a-f]+"}

proc re_tree_preamble { type } {
    return "[BOL]<tree at [ADR], next \(\\(nil\\)|0x\[0-9a-f\]+\), type $type"
}

proc re_tree_exp { exp_regex type } {
    set RE [re_tree_preamble $type]
    set RE "$RE, exp:[EOL]"
    set RE "$RE$exp_regex"
    set RE "$RE[BOL]>[EOL]"
    return $RE
}

proc re_tree_integer { n } {
    set RE [re_tree_preamble "T_INTEGER"]
    set RE "$RE, number $n>[EOL]"
    return $RE
}

proc re_tree_postfix_inc { exp_regex } {
    return [re_tree_exp $exp_regex "T_P_INC"]
}

proc re_tree_postfix_dec { exp_regex } {
    return [re_tree_exp $exp_regex "T_P_DEC"]
}

proc re_tree_unary_inc { exp_regex } {
    return [re_tree_exp $exp_regex "T_INC"]
}

proc re_tree_unary_dec { exp_regex } {
    return [re_tree_exp $exp_regex "T_DEC"]

}

proc re_tree_identifier { name address } {
    set RE [re_tree_preamble "T_IDENTIFIER"]
    set RE "$RE, id:[EOL]"
    set RE "$RE[BOL]<identifier at $address. name: $name>[EOL]"
    set RE "$RE[BOL]>[EOL]"
}

proc expect_tree_integer { n } {
    global test
     expect {
         -re [re_tree_integer $n] { pass "$test" }
    }
}

proc expect_tree_postfix_inc { exp_regex } {
    global test
     expect {
         -re [re_tree_postfix_inc $exp_regex] { pass "$test" }
    }
}

proc expect_tree_postfix_dec { exp_regex } {
    global test
     expect {
         -re [re_tree_postfix_dec $exp_regex] { pass "$test" }
    }
}

proc expect_tree_unary_inc { exp_regex } {
    global test
     expect {
         -re [re_tree_unary_inc $exp_regex] { pass "$test" }
    }
}

proc expect_tree_unary_dec { exp_regex } {
    global test
     expect {
         -re [re_tree_unary_dec $exp_regex] { pass "$test" }
    }
}

proc expect_tree_identifier { name {address ""} } {
    global test
    if {$address eq ""} {
        set address "[ADR]"
    }
    expect {
        -re [re_tree_identifier $name $address] { pass "$test" }
    }
}
