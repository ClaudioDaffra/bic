
DEFTYPE(T_INTEGER, "Constant integer")
DEFTYPE(T_FLOAT, "Constant floating point")
DEFTYPE(T_STRING, "Constant string")
DEFTYPE(T_STRUCT, "Structure")
DEFTYPE(T_UNION, "Union")
DEFTYPE(T_P_INC, "Increment (postfix)")
DEFTYPE(T_P_DEC, "Decrement (postfix)")
DEFTYPE(T_INC, "Increment (unary)")
DEFTYPE(T_DEC, "Decrement (unary)")
DEFTYPE(T_SIZEOF, "Size of")
DEFTYPE(T_IDENTIFIER, "Identifier")
DEFTYPE(T_POINTER, "Pointer")
DEFTYPE(T_MUL, "Multiply")
DEFTYPE(T_DIV, "Divide")
DEFTYPE(T_MOD, "Modulus")
DEFTYPE(T_ADD, "Addition")
DEFTYPE(T_SUB, "Subtraction")
DEFTYPE(T_LT, "Less than")
DEFTYPE(T_GT, "Greater than")
DEFTYPE(T_LTEQ, "Less than or equal")
DEFTYPE(T_GTEQ, "Less than or equal")
DEFTYPE(T_EQ, "Equal")
DEFTYPE(T_N_EQ, "Not Equal")
DEFTYPE(T_L_OR, "Logical OR")
DEFTYPE(T_L_AND, "Logical AND")
DEFTYPE(T_IF, "If")
DEFTYPE(T_ASSIGN, "Assignment")
DEFTYPE(T_TYPEDEF, "Typedef")
DEFTYPE(T_EXTERN, "External")
DEFTYPE(T_STATIC, "Static")
DEFTYPE(T_COMP_ACCESS, "Compound Access")
DEFTYPE(T_ARRAY_ACCESS, "Array Access")
DEFTYPE(T_ADDR, "Address Operator")
DEFTYPE(T_DEREF, "Address Dereference")
DEFTYPE(T_ARRAY, "Array Declaration")
DEFTYPE(T_DECL, "Declaration")
DEFTYPE(T_DECL_COMPOUND, "Compound Declataion")
DEFTYPE(T_DECL_FN, "Function Declaration")
DEFTYPE(T_FN_DEF, "Function Definition")
DEFTYPE(T_FN_CALL, "Function Call")
DEFTYPE(T_FN_ARG, "Function Argument")
DEFTYPE(T_LOOP_FOR, "For loop")
DEFTYPE(T_RETURN, "Function return")
DEFTYPE(T_ENUMERATOR, "Enumerator")
DEFTYPE(T_VARIADIC, "Variadic Function Argument")
DEFTYPE(T_LIVE_VAR, "Live Variable")
DEFTYPE(T_LIVE_COMPOUND, "Live Compound")
DEFTYPE(CHAIN_HEAD, "Tree Chain Head")
DEFTYPE(E_CTX, "Evaluator Context")
DEFTYPE(E_ALLOC, "Evaluator allocation")
DEFTYPE(E_INCOMP_TYPE, "Incompletel type")
DEFTYPE(E_MAP, "Evaluator map")
DEFTYPE(CPP_INCLUDE, "C preprocessor include directive")

/* We have to declare the void type here as using it as a DEFCTYPE
 * would cause a compilation error since we can't declare a variable
 * as a void type. */
DEFTYPE(D_T_VOID, "Void type")
